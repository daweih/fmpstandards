/**
 * =====================================================
 * Debug ( )
 *
 * PARAMETERS:
 *		none
 *
 * RETURNS:
 *		(string) A list of informative values
 * 		about the current FMP environment.
 *
 * DEPENDENCIES:
 * 		Developer ()
 *
 * NOTES:
 *
 * RELEASE:
 *		2015-11-04 - Added missing functions from 13/14 releases.
 *		2014-05-08 - Injecting LayoutID despite it not being an internal function.
 *		2014-03-04 - Updated recursion and added more functions.
 * 		2013-01-25 - Updated to be recursive and use better output. Included more functions
 * 		101009 - Initial by Matt Petrowsky
 * =====================================================
 *
 */

If ( Developer;
	Let ( [
		~input = List (
			"Environment";
			"	AllowAbortState";
			"	ApplicationArchitecture";
			"	ApplicationLanguage";
			"	ApplicationVersion";
			"	ConnectionState";
			"	CurrentDate";
			"	CurrentHostTimeStamp";
			"	CurrentTime";
			"	CurrentTimeStamp";
			"	CurrentTimeUTCMilliseconds";
			"	CustomMenuSetName";
			"	Device";
			"	ErrorCaptureState";
			"	FoundCount";
			"	HostApplicationVersion";
			"	HostIPAddress";
			"	HostName";
			"	InstalledFMPlugins";
			"	ModifiedFields";
			"	MultiUserState";
			"	PageNumber";
			"	PageNumber";
			"	PersistentID";
			"	QuickFindText";
			"	RecordOpenCount";
			"	RequestCount";
			"	RequestOmitState";
			"	ScriptAnimationState";
			"	SystemIPAddress";
			"	SystemLanguage";
			"	SystemNICAddress";
			"	SystemPlatform";
			"	SystemVersion";
			"	UseSystemFormatsState";
			"Connection";
			"	ConnectionAttributes";
			"	NetworkProtocol";
			"	NetworkType";
			"File";
			"	EncryptionState";
			"	FileName";
			"	FileSize";
			"Errors";
			"	LastError";
			"	LastODBCError";
			"User";
			"	AccountExtendedPrivileges";
			"	AccountName";
			"	AccountPrivilegeSetName";
			"	CurrentExtendedPrivileges";
			"	CurrentPrivilegeSetName";
			"	UserCount";
			"	UserName";
			"Mobile";
			"	TouchKeyboardState";
			"Layout";
			"	ActiveLayoutObjectName";
			"	ActivePortalRowNumber";
			"	AllowFormattingBarState";
			"	LayoutAccess";
			"	LayoutCount";
			"	LayoutName";
			"	LayoutNumber";
			"	LayoutTableName";
			"	LayoutTableName";
			"	LayoutViewState";
			"	MenubarState";
			"	StatusAreaState";
			"	TextRulerVisible";
			"Windows";
			"	ScreenDepth";
			"	ScreenHeight";
			"	ScreenScaleFactor";
			"	ScreenWidth";
			"	WindowContentHeight";
			"	WindowContentWidth";
			"	WindowDesktopHeight";
			"	WindowDesktopWidth";
			"	WindowHeight";
			"	WindowLeft";
			"	WindowMode";
			"	WindowName";
			"	WindowOrientation";
			"	WindowStyle";
			"	WindowTop";
			"	WindowVisible";
			"	WindowWidth";
			"	WindowZoomLevel";
			"Records";
			"	RecordAccess";
			"	RecordID";
			"	RecordModificationCount";
			"	RecordNumber";
			"	RecordOpenState";
			"	SortState";
			"	TotalRecordCount";
			"Field";
			"	ActiveFieldContents";
			"	ActiveFieldName";
			"	ActiveFieldTableName";
			"	ActiveRepetitionNumber";
			"	ActiveSelectionSize";
			"	ActiveSelectionStart";
			"	CalculationRepetitionNumber";
			"Script";
			"	ScriptName";
			"	ScriptParameter";
			"	ScriptResult";
			"Paths";
			"	DesktopPath";
			"	DocumentsPath";
			"	FileMakerPath";
			"	FilePath";
			"	PreferencesPath";
			"	SystemDrive";
			"	TemporaryPath";
		);
		~padding = "                              "; // 30 chars is longest function name
		~tab = "	";
		~line = GetValue ( ~input ; $~debugCounter );
		~eval = If ( Left ( ~line ; 1 ) = ~tab ; // evaluate lines prefixed with tabs
			Let ( [
				~function = Trim ( ~line );
				~result = Evaluate ( "Get(" & ~function & ")" )
			];
				// Output
				~function
				& Left ( ~padding ; Length ( ~padding ) - Length ( ~function ) ) // spacing out result
				& If ( ValueCount ( ~result ) > 1; // some functions return multiple lines
					Substitute ( ~result ; ¶ ; ¶ & ~tab & Left ( ~padding ; Length ( ~padding ) - 1 ) );
					~result
				)
			);

			~line
		);
		~exit = $~debugCounter = ValueCount ( ~input )
	];
		Let ( [
			$~debugCounter = If ( ~exit ; "" ; $~debugCounter + 1 );
			$~debugOutput = List ( $~debugOutput ; ~eval )
		];
				If ( ~exit ;
					Substitute (
						$~debugOutput & Let ( $~debugOutput = "" ; "");
					[ "Layout¶" ; "Layout¶"
									& ~tab
									& "LayoutID"
									& Left ( ~padding ; Length ( ~padding ) - Length ( "LayoutID" ) - 1 )
									&  GetValue ( LayoutIDs ( Get ( FileName ) ) ; Get ( LayoutNumber ) )
									&¶ ]
					) ;
				Debug )
		)
	)
)
